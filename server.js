 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongoClient = require('mongodb').MongoClient;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

// Start mongo client
var db;
mongoClient.connect(process.env.DB_URL, function(err, client) {
  if (err) {
    console.log(err);  
  } else {
    console.log("Connected successfully to server");

    db = client.db('fcc-ian-urlshortener');
  }
});

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.get('/new/:url(*)', function(req, res) {
  const urlCollection = db.collection('urls');
  var idVal = Math.floor(1000 + Math.random() * 9000);
  urlCollection.insert({
    url_id: "" + idVal,
    url: req.params.url
  }, function(err, data) {
    if (err) {
      if (err.name === 'MongoError' && err.code === 11000) {
          // Duplicate id
        idVal = Math.floor(1000 + Math.random() * 9000);
      } else {
        console.log(err);  
      }
    } else {
      var short_url = "https://plaid-shelf.glitch.me/" + idVal;
      res.send({"original_url": req.params.url, "short_url": short_url});
    }
  });
});

app.get('/:id', function(req, res) {
  const urlCollection = db.collection('urls');
  urlCollection.findOne({"url_id": req.params.id}, function(err, doc) {
    if (err) {
      console.log(err);  
    } else {
      var url = doc['url'];
      res.redirect(url);
    }
  });
});
        
// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

